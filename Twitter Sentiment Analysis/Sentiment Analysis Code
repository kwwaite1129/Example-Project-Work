{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "#import re\n",
    "from textblob import TextBlob\n",
    "import os\n",
    "import tweepy as tw\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "dc_data = pd.read_csv('DailyComments.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a wordcloud to show most popular words\n",
    "from wordcloud import WordCloud, STOPWORDS\n",
    "stopwords = set(STOPWORDS)\n",
    "text = \" \".join(comment for comment in dc_data.comments)\n",
    "wordcloud = WordCloud(background_color=\"white\", stopwords=stopwords, colormap='seismic').generate(text)\n",
    "# Display the generated image:\n",
    "plt.imshow(wordcloud, interpolation='bilinear')\n",
    "plt.axis(\"off\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a polarity score function to idenitify the polarity of each word\n",
    "# The polarity score ranges from -1 to 1 and is applied to each word within a string. \n",
    "# Positively connoted words receive a score of 1 while negative words are marked with -1. \n",
    "# The average of these scores within a string produces the final polarity score.\n",
    "def polarity_score(string):\n",
    "    from nltk.corpus import stopwords\n",
    "    tb = TextBlob(string)\n",
    "    stop = [word for word in tb.words if word not in stopwords.words('english')]\n",
    "    final = \" \".join(stop)\n",
    "    return TextBlob(final).sentiment.polarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Day of Week</th>\n",
       "      <th>comments</th>\n",
       "      <th>polarity_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Monday</td>\n",
       "      <td>Hello, how are you?</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tuesday</td>\n",
       "      <td>Today is a good day!</td>\n",
       "      <td>7.000000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Wednesday</td>\n",
       "      <td>It's my birthday so it's a really special day!</td>\n",
       "      <td>3.571429e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Thursday</td>\n",
       "      <td>Today is neither a good day or a bad day!</td>\n",
       "      <td>5.551115e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Friday</td>\n",
       "      <td>I'm having a bad day.</td>\n",
       "      <td>-7.000000e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Saturday</td>\n",
       "      <td>There' s nothing special happening today.</td>\n",
       "      <td>3.571429e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Sunday</td>\n",
       "      <td>Today is a SUPER good day!</td>\n",
       "      <td>5.166667e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Day of Week                                        comments  polarity_score\n",
       "0      Monday                             Hello, how are you?    0.000000e+00\n",
       "1     Tuesday                            Today is a good day!    7.000000e-01\n",
       "2   Wednesday  It's my birthday so it's a really special day!    3.571429e-01\n",
       "3    Thursday       Today is neither a good day or a bad day!    5.551115e-17\n",
       "4      Friday                           I'm having a bad day.   -7.000000e-01\n",
       "5    Saturday       There' s nothing special happening today.    3.571429e-01\n",
       "6      Sunday                      Today is a SUPER good day!    5.166667e-01"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dc_data['polarity_score'] = dc_data['comments'].apply(lambda x: polarity_score(x))\n",
    "dc_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a sentiment identifier based on the polarity score\n",
    "def sentiment_score(x):\n",
    "    if x > 0:\n",
    "        return \"Positive\"\n",
    "    elif x < 0:\n",
    "        return \"Negative\"\n",
    "    else:\n",
    "        return \"Neutral\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Day of Week</th>\n",
       "      <th>comments</th>\n",
       "      <th>polarity_score</th>\n",
       "      <th>sentiment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Monday</td>\n",
       "      <td>Hello, how are you?</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>Neutral</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tuesday</td>\n",
       "      <td>Today is a good day!</td>\n",
       "      <td>7.000000e-01</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Wednesday</td>\n",
       "      <td>It's my birthday so it's a really special day!</td>\n",
       "      <td>3.571429e-01</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Thursday</td>\n",
       "      <td>Today is neither a good day or a bad day!</td>\n",
       "      <td>5.551115e-17</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Friday</td>\n",
       "      <td>I'm having a bad day.</td>\n",
       "      <td>-7.000000e-01</td>\n",
       "      <td>Negative</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Saturday</td>\n",
       "      <td>There' s nothing special happening today.</td>\n",
       "      <td>3.571429e-01</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Sunday</td>\n",
       "      <td>Today is a SUPER good day!</td>\n",
       "      <td>5.166667e-01</td>\n",
       "      <td>Positive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Day of Week                                        comments  polarity_score  \\\n",
       "0      Monday                             Hello, how are you?    0.000000e+00   \n",
       "1     Tuesday                            Today is a good day!    7.000000e-01   \n",
       "2   Wednesday  It's my birthday so it's a really special day!    3.571429e-01   \n",
       "3    Thursday       Today is neither a good day or a bad day!    5.551115e-17   \n",
       "4      Friday                           I'm having a bad day.   -7.000000e-01   \n",
       "5    Saturday       There' s nothing special happening today.    3.571429e-01   \n",
       "6      Sunday                      Today is a SUPER good day!    5.166667e-01   \n",
       "\n",
       "  sentiment  \n",
       "0   Neutral  \n",
       "1  Positive  \n",
       "2  Positive  \n",
       "3  Positive  \n",
       "4  Negative  \n",
       "5  Positive  \n",
       "6  Positive  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dc_data['sentiment'] = dc_data['polarity_score'].apply(lambda x: sentiment_score(x))\n",
    "dc_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar_data = pd.DataFrame(dc_data.groupby('sentiment')['comments'].count()).reset_index().sort_values(by='comments', ascending = False)\n",
    "plt.bar(bar_data['sentiment'], bar_data['comments'])\n",
    "plt.title(\"Sentiment Analysis of Daily Comments\")\n",
    "plt.ylabel('Number of Comments')\n",
    "plt.xlabel('Sentiment of Tweets')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# For my extra credit, I am going to look at all the tweets with the hashtag #CamNewton on the sunday and monday\n",
    "# of the last Patriots game. This way I can compare the sentiment of the tweets about Cam prior to the game, \n",
    "# during the game and after the game\n",
    "consumer_key= 'LThb4n0zKLlTmuEfajhktMfKy'\n",
    "consumer_secret= '30miGhyGi4qAoEvQMkzncJdXSm1Dm9dQJuh7WhIOl9IlFdq74q'\n",
    "access_token= '1258198040801955840-FrdXpAZaMq3buD0I611tQvYG0SAVyS'\n",
    "access_token_secret= 'HLSS3Mov68oIdl9ejeET8UdNUkRPRl4MeQ0G3pdCjrGBo'\n",
    "auth = tw.OAuthHandler(consumer_key, consumer_secret)\n",
    "auth.set_access_token(access_token, access_token_secret)\n",
    "api = tw.API(auth, wait_on_rate_limit=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "search_words = \"#CamNewton\" + \" -filter:retweets\"\n",
    "date_since = \"2020-09-20\"\n",
    "date_until = \"2020-09-22\"\n",
    "tweets = tw.Cursor(api.search,q=search_words,ang=\"en\",since=date_since,until=date_until).items()\n",
    "cam_df = pd.DataFrame([[tweet.text,tweet.created_at] for tweet in tweets],columns=['tweet', \"date\"])\n",
    "# Saving to a CSV due to twitter only allowing you to pull tweets within 10 days. Can use for future review\n",
    "cam_df.to_csv('cam_tweets.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>date</th>\n",
       "      <th>polarity_score</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>Weekday</th>\n",
       "      <th>Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Week 2 @presidentmal #jamaladams #nfl #seattle...</td>\n",
       "      <td>2020-09-21 23:39:33</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Monday</td>\n",
       "      <td>23:39:33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>@ahardy316 @Fingrz692 @JerseyKidPicks @EnterPr...</td>\n",
       "      <td>2020-09-21 23:33:26</td>\n",
       "      <td>0.068182</td>\n",
       "      <td>Positive</td>\n",
       "      <td>Monday</td>\n",
       "      <td>23:33:26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Just remember, everyone on ESPN &amp;amp; FS1 who ...</td>\n",
       "      <td>2020-09-21 22:50:48</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Monday</td>\n",
       "      <td>22:50:48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>When you see your work bestie during your lunc...</td>\n",
       "      <td>2020-09-21 22:28:53</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Monday</td>\n",
       "      <td>22:28:53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Excited to share the latest addition to my #et...</td>\n",
       "      <td>2020-09-21 22:05:00</td>\n",
       "      <td>0.337121</td>\n",
       "      <td>Positive</td>\n",
       "      <td>Monday</td>\n",
       "      <td>22:05:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>593</th>\n",
       "      <td>Que pensaban los #dolphins que sin #tombrady y...</td>\n",
       "      <td>2020-09-20 10:56:12</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>10:56:12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>594</th>\n",
       "      <td>Cam Newton + Bill Belichick= ???? #NFL #Patrio...</td>\n",
       "      <td>2020-09-20 03:51:49</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>03:51:49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>595</th>\n",
       "      <td>#sports #blog #sportsblog #nba #nfl #mlb #nhl ...</td>\n",
       "      <td>2020-09-20 03:17:59</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>03:17:59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>#sports #blog #sportsblog #nba #nfl #mlb #nhl ...</td>\n",
       "      <td>2020-09-20 02:36:16</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>02:36:16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>597</th>\n",
       "      <td>Meaning they will beat the Falcons tomorrow \\n...</td>\n",
       "      <td>2020-09-20 01:49:10</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>01:49:10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>598 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 tweet                date  \\\n",
       "0    Week 2 @presidentmal #jamaladams #nfl #seattle... 2020-09-21 23:39:33   \n",
       "1    @ahardy316 @Fingrz692 @JerseyKidPicks @EnterPr... 2020-09-21 23:33:26   \n",
       "2    Just remember, everyone on ESPN &amp; FS1 who ... 2020-09-21 22:50:48   \n",
       "3    When you see your work bestie during your lunc... 2020-09-21 22:28:53   \n",
       "4    Excited to share the latest addition to my #et... 2020-09-21 22:05:00   \n",
       "..                                                 ...                 ...   \n",
       "593  Que pensaban los #dolphins que sin #tombrady y... 2020-09-20 10:56:12   \n",
       "594  Cam Newton + Bill Belichick= ???? #NFL #Patrio... 2020-09-20 03:51:49   \n",
       "595  #sports #blog #sportsblog #nba #nfl #mlb #nhl ... 2020-09-20 03:17:59   \n",
       "596  #sports #blog #sportsblog #nba #nfl #mlb #nhl ... 2020-09-20 02:36:16   \n",
       "597  Meaning they will beat the Falcons tomorrow \\n... 2020-09-20 01:49:10   \n",
       "\n",
       "     polarity_score sentiment Weekday      Time  \n",
       "0          0.000000   Neutral  Monday  23:39:33  \n",
       "1          0.068182  Positive  Monday  23:33:26  \n",
       "2          0.000000   Neutral  Monday  22:50:48  \n",
       "3          0.000000   Neutral  Monday  22:28:53  \n",
       "4          0.337121  Positive  Monday  22:05:00  \n",
       "..              ...       ...     ...       ...  \n",
       "593        0.000000   Neutral  Sunday  10:56:12  \n",
       "594        0.000000   Neutral  Sunday  03:51:49  \n",
       "595        0.000000   Neutral  Sunday  03:17:59  \n",
       "596        0.000000   Neutral  Sunday  02:36:16  \n",
       "597        0.000000   Neutral  Sunday  01:49:10  \n",
       "\n",
       "[598 rows x 6 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cam_df['polarity_score'] = cam_df['tweet'].apply(lambda x: polarity_score(x))\n",
    "cam_df['sentiment'] = cam_df['polarity_score'].apply(lambda x: sentiment_score(x))\n",
    "cam_df['Weekday'] = cam_df['date'].dt.day_name()\n",
    "cam_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# this graph shows that overall, the tweets about Cam Newton were mainly Neutral and Positive\n",
    "cam_bar_data = pd.DataFrame(cam_df.groupby('sentiment')['tweet'].count()).reset_index()\n",
    "plt.bar(cam_bar_data['sentiment'], cam_bar_data['tweet'])\n",
    "plt.title(\"Sentiment Analysis of Cam Netwon Tweet from Sunday 9/20 - Monday 9/21\")\n",
    "plt.ylabel('Number of Tweets')\n",
    "plt.xlabel('Sentiment of Tweets')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweet</th>\n",
       "      <th>date</th>\n",
       "      <th>polarity_score</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>Weekday</th>\n",
       "      <th>Time</th>\n",
       "      <th>Game_Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Week 2 @presidentmal #jamaladams #nfl #seattle...</td>\n",
       "      <td>2020-09-21 23:39:33</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Monday</td>\n",
       "      <td>23:39:33</td>\n",
       "      <td>Postgame</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>@ahardy316 @Fingrz692 @JerseyKidPicks @EnterPr...</td>\n",
       "      <td>2020-09-21 23:33:26</td>\n",
       "      <td>0.068182</td>\n",
       "      <td>Positive</td>\n",
       "      <td>Monday</td>\n",
       "      <td>23:33:26</td>\n",
       "      <td>Postgame</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Just remember, everyone on ESPN &amp;amp; FS1 who ...</td>\n",
       "      <td>2020-09-21 22:50:48</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Monday</td>\n",
       "      <td>22:50:48</td>\n",
       "      <td>Postgame</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>When you see your work bestie during your lunc...</td>\n",
       "      <td>2020-09-21 22:28:53</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Monday</td>\n",
       "      <td>22:28:53</td>\n",
       "      <td>Postgame</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Excited to share the latest addition to my #et...</td>\n",
       "      <td>2020-09-21 22:05:00</td>\n",
       "      <td>0.337121</td>\n",
       "      <td>Positive</td>\n",
       "      <td>Monday</td>\n",
       "      <td>22:05:00</td>\n",
       "      <td>Postgame</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>593</th>\n",
       "      <td>Que pensaban los #dolphins que sin #tombrady y...</td>\n",
       "      <td>2020-09-20 10:56:12</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>10:56:12</td>\n",
       "      <td>Pregame</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>594</th>\n",
       "      <td>Cam Newton + Bill Belichick= ???? #NFL #Patrio...</td>\n",
       "      <td>2020-09-20 03:51:49</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>03:51:49</td>\n",
       "      <td>Pregame</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>595</th>\n",
       "      <td>#sports #blog #sportsblog #nba #nfl #mlb #nhl ...</td>\n",
       "      <td>2020-09-20 03:17:59</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>03:17:59</td>\n",
       "      <td>Pregame</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>#sports #blog #sportsblog #nba #nfl #mlb #nhl ...</td>\n",
       "      <td>2020-09-20 02:36:16</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>02:36:16</td>\n",
       "      <td>Pregame</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>597</th>\n",
       "      <td>Meaning they will beat the Falcons tomorrow \\n...</td>\n",
       "      <td>2020-09-20 01:49:10</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>Sunday</td>\n",
       "      <td>01:49:10</td>\n",
       "      <td>Pregame</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>598 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 tweet                date  \\\n",
       "0    Week 2 @presidentmal #jamaladams #nfl #seattle... 2020-09-21 23:39:33   \n",
       "1    @ahardy316 @Fingrz692 @JerseyKidPicks @EnterPr... 2020-09-21 23:33:26   \n",
       "2    Just remember, everyone on ESPN &amp; FS1 who ... 2020-09-21 22:50:48   \n",
       "3    When you see your work bestie during your lunc... 2020-09-21 22:28:53   \n",
       "4    Excited to share the latest addition to my #et... 2020-09-21 22:05:00   \n",
       "..                                                 ...                 ...   \n",
       "593  Que pensaban los #dolphins que sin #tombrady y... 2020-09-20 10:56:12   \n",
       "594  Cam Newton + Bill Belichick= ???? #NFL #Patrio... 2020-09-20 03:51:49   \n",
       "595  #sports #blog #sportsblog #nba #nfl #mlb #nhl ... 2020-09-20 03:17:59   \n",
       "596  #sports #blog #sportsblog #nba #nfl #mlb #nhl ... 2020-09-20 02:36:16   \n",
       "597  Meaning they will beat the Falcons tomorrow \\n... 2020-09-20 01:49:10   \n",
       "\n",
       "     polarity_score sentiment Weekday      Time Game_Type  \n",
       "0          0.000000   Neutral  Monday  23:39:33  Postgame  \n",
       "1          0.068182  Positive  Monday  23:33:26  Postgame  \n",
       "2          0.000000   Neutral  Monday  22:50:48  Postgame  \n",
       "3          0.000000   Neutral  Monday  22:28:53  Postgame  \n",
       "4          0.337121  Positive  Monday  22:05:00  Postgame  \n",
       "..              ...       ...     ...       ...       ...  \n",
       "593        0.000000   Neutral  Sunday  10:56:12   Pregame  \n",
       "594        0.000000   Neutral  Sunday  03:51:49   Pregame  \n",
       "595        0.000000   Neutral  Sunday  03:17:59   Pregame  \n",
       "596        0.000000   Neutral  Sunday  02:36:16   Pregame  \n",
       "597        0.000000   Neutral  Sunday  01:49:10   Pregame  \n",
       "\n",
       "[598 rows x 7 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Categorize the tweet to be either pregame, postgame or in game based on the time.For reference, the game started\n",
    "# at 8:30 Sunday night and ended around midnight Sunday\n",
    "import datetime\n",
    "kickoff = datetime.datetime(2020, 9, 20, 20, 30, 0)\n",
    "conditions = [(cam_df['Weekday'] == \"Monday\"),(cam_df['Weekday'] == \"Sunday\") & (cam_df['date'] < kickoff),\n",
    "              (cam_df['Weekday'] == \"Sunday\") & (cam_df['date'] > kickoff)]\n",
    "choices = [\"Postgame\", \"Pregame\", \"In_Game\"]\n",
    "cam_df['Game_Type'] = np.select(conditions, choices, default = \"In_Game\")\n",
    "cam_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kenny/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  from ipykernel import kernelapp as app\n",
      "/Users/kenny/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  app.launch_new_instance()\n",
      "/Users/kenny/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "cam_gtype_bar_data = pd.DataFrame(cam_df.groupby(['Game_Type','sentiment'])['tweet'].count()).reset_index().sort_values(by='tweet', ascending = False)\n",
    "\n",
    "cam_pregame_df = cam_gtype_bar_data[cam_gtype_bar_data['Game_Type'] == 'Pregame']\n",
    "cam_ingame_df = cam_gtype_bar_data[cam_gtype_bar_data['Game_Type'] == 'In_Game']\n",
    "cam_postgame_df = cam_gtype_bar_data[cam_gtype_bar_data['Game_Type'] == 'Postgame']\n",
    "\n",
    "pregame_total = cam_pregame_df['tweet'].sum()\n",
    "ingame_total = cam_ingame_df['tweet'].sum()\n",
    "postgame_total = cam_postgame_df['tweet'].sum()\n",
    "\n",
    "pregame_array = [row/pregame_total for row in cam_pregame_df['tweet']]\n",
    "ingame_array = [row/ingame_total for row in cam_ingame_df['tweet']]\n",
    "postgame_array = [row/postgame_total for row in cam_postgame_df['tweet']]\n",
    "\n",
    "cam_pregame_df['Percent of Total'] = pregame_array\n",
    "cam_ingame_df['Percent of Total'] = ingame_array\n",
    "cam_postgame_df['Percent of Total'] = postgame_array\n",
    "\n",
    "frames = [cam_pregame_df, cam_ingame_df, cam_postgame_df]\n",
    "cam_stacked_df = pd.concat(frames).sort_values(by = \"sentiment\")\n",
    "cam_stacked_df\n",
    "\n",
    "cam_pos_df = cam_stacked_df[cam_stacked_df['sentiment'] == 'Positive']\n",
    "cam_neg_df = cam_stacked_df[cam_stacked_df['sentiment'] == 'Negative']\n",
    "cam_neu_df = cam_stacked_df[cam_stacked_df['sentiment'] == 'Neutral']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create the gametype and sentiment lists to be used in the stacked bar chart\n",
    "sentiment = cam_stacked_df['sentiment'].unique().tolist()\n",
    "gametype = cam_stacked_df['Game_Type'].unique().tolist()\n",
    "# create the arrays for tweet counts for each sentiment by gametype\n",
    "negative = np.array(cam_neg_df['Percent of Total'])\n",
    "neutral = np.array(cam_neu_df['Percent of Total'])\n",
    "positive = np.array(cam_pos_df['Percent of Total'])\n",
    "\n",
    "ind = [x for x, _ in enumerate(sentiment)]\n",
    "# create the stacked bar chart\n",
    "plt.bar(ind, negative, width=0.8, label=\"Negative\", color='red', bottom=neutral+positive)\n",
    "plt.bar(ind, neutral, width=0.8, label=\"Neutral\", color='blue', bottom=positive)\n",
    "plt.bar(ind, positive, width=0.8, label=\"Positive\", color='green')\n",
    "\n",
    "plt.xticks(ind, gametype)\n",
    "plt.ylabel(\"Percentage of Tweets\")\n",
    "plt.legend(bbox_to_anchor=(1, 0.7), loc='upper left')\n",
    "plt.title(\"Sentiment of Cam Newton Tweets by Game Timeframe\")\n",
    "plt.savefig('cam_stacked.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# From this graph, you can see the positive tweets went up from the begining of the game to the end of the game\n",
    "# the neutral tweets decreased from the pregame to postgame\n",
    "# the negative tweets decreased from pregame to ingame, but increased from ingame to postgame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Game_Type</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>tweet</th>\n",
       "      <th>Percent of Total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Pregame</td>\n",
       "      <td>Negative</td>\n",
       "      <td>6</td>\n",
       "      <td>0.142857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>In_Game</td>\n",
       "      <td>Negative</td>\n",
       "      <td>2</td>\n",
       "      <td>0.133333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Postgame</td>\n",
       "      <td>Negative</td>\n",
       "      <td>88</td>\n",
       "      <td>0.162662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Pregame</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>26</td>\n",
       "      <td>0.619048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>In_Game</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>9</td>\n",
       "      <td>0.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Postgame</td>\n",
       "      <td>Neutral</td>\n",
       "      <td>244</td>\n",
       "      <td>0.451017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Pregame</td>\n",
       "      <td>Positive</td>\n",
       "      <td>10</td>\n",
       "      <td>0.238095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>In_Game</td>\n",
       "      <td>Positive</td>\n",
       "      <td>4</td>\n",
       "      <td>0.266667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Postgame</td>\n",
       "      <td>Positive</td>\n",
       "      <td>209</td>\n",
       "      <td>0.386322</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Game_Type sentiment  tweet  Percent of Total\n",
       "6   Pregame  Negative      6          0.142857\n",
       "0   In_Game  Negative      2          0.133333\n",
       "3  Postgame  Negative     88          0.162662\n",
       "7   Pregame   Neutral     26          0.619048\n",
       "1   In_Game   Neutral      9          0.600000\n",
       "4  Postgame   Neutral    244          0.451017\n",
       "8   Pregame  Positive     10          0.238095\n",
       "2   In_Game  Positive      4          0.266667\n",
       "5  Postgame  Positive    209          0.386322"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cam_stacked_df.sort_values(by=\"sentiment\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
